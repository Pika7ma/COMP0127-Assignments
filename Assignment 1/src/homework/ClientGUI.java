package homework;

import javax.swing.*;
import javax.swing.text.Document;
import java.awt.*;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.awt.event.ComponentAdapter;
import java.io.BufferedReader;
import java.io.IOException;
import java.io.InputStreamReader;
import java.net.*;

class ClientEngine {
    public static int PORT;
    public static InetAddress ADDR;
    public SenderGUI senderGUI;
    public ClientEngine() {
        try {
            ADDR = InetAddress.getByName("localhost");
            PORT = 8848;
        } catch (UnknownHostException e) {
            e.printStackTrace();
        }
        senderGUI = new SenderGUI(ClientEngine.PORT, ClientEngine.ADDR);
    }
}

class SenderGUI {
    private DatagramSocket socket;
    private DatagramPacket packet;
    private DatagramPacket received;

    private static int PORT;
    private static InetAddress ADDR;
    private byte[] outBuff;
    private byte[] inBuff;

    public SenderGUI(int PORT, InetAddress ADDR) {
        SenderGUI.PORT = PORT;
        SenderGUI.ADDR = ADDR;
        inBuff = new byte[1024 * 1024];
        received = new DatagramPacket(inBuff, inBuff.length);
    }

    private String makeString(DatagramPacket packet) {
        return new String(packet.getData(), 0, packet.getLength());
    }

    public String send(String path) {
        try {
            socket = new DatagramSocket();
            outBuff = path.getBytes();
            packet = new DatagramPacket(outBuff, outBuff.length, SenderGUI.ADDR, SenderGUI.PORT);
            socket.send(packet);
            socket.receive(received);
        } catch (SocketException e) {
            e.printStackTrace();
        } catch (IOException e) {
            e.printStackTrace();
        }
        return makeString(received);
    }
}


public class ClientGUI {
    public JPanel panel1;
    public JButton sendButton;
    public JTextField textField1;
    public JPanel JPanel1;
    public JScrollPane JScrollPane1;
    public JTextArea textArea1;
    private static boolean isStart = false;
    private static String split = "--------------------------------------------------------------\n";
    private ClientEngine client;
    private String output;

    public ClientGUI() {
        client = new ClientEngine();
        sendButton.addActionListener(new ActionListener() {
            @Override
            public void actionPerformed(ActionEvent actionEvent) {
                if (isStart) {
                    textArea1.append(split);
                }
                isStart = true;
                String input = textField1.getText();
                output = client.senderGUI.send(input);
                textArea1.append(output);
                textField1.setText("");
            }
        });
        textField1.addActionListener(new ActionListener() {
            @Override
            public void actionPerformed(ActionEvent e) {
                if (isStart) {
                    textArea1.append(split);
                }
                isStart = true;
                textArea1.append("You said:\n\t");
                String input = textField1.getText();
                textArea1.append(input);
                textArea1.append("\n");
                output = client.senderGUI.send(input);
                textArea1.append(output);
                textField1.setText("");
            }
        });
    }

    public static void main(String[] args) {
        JFrame frame = new JFrame("ClientGUI");
        frame.setContentPane(new ClientGUI().panel1);
        frame.getRootPane().setDefaultButton(new ClientGUI().sendButton);
        frame.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
        frame.pack();
        frame.setVisible(true);
    }

    {
// GUI initializer generated by IntelliJ IDEA GUI Designer
// >>> IMPORTANT!! <<<
// DO NOT EDIT OR ADD ANY CODE HERE!
        $$$setupUI$$$();
    }

    /**
     * Method generated by IntelliJ IDEA GUI Designer
     * >>> IMPORTANT!! <<<
     * DO NOT edit this method OR call it in your code!
     *
     * @noinspection ALL
     */
    private void $$$setupUI$$$() {
        panel1 = new JPanel();
        panel1.setLayout(new BorderLayout(0, 0));
        JPanel1 = new JPanel();
        JPanel1.setLayout(new BorderLayout(0, 0));
        panel1.add(JPanel1, BorderLayout.SOUTH);
        sendButton = new JButton();
        sendButton.setText("Send");
        JPanel1.add(sendButton, BorderLayout.EAST);
        textField1 = new JTextField();
        JPanel1.add(textField1, BorderLayout.CENTER);
        JScrollPane1 = new JScrollPane();
        panel1.add(JScrollPane1, BorderLayout.CENTER);
        textArea1 = new JTextArea();
        textArea1.setEditable(false);
        JScrollPane1.setViewportView(textArea1);
    }

    /**
     * @noinspection ALL
     */
    public JComponent $$$getRootComponent$$$() {
        return panel1;
    }
}
